name: Build and Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_URI: 351545278583.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_AUTH: ctse-auth
  ECR_REPOSITORY_GATEWAY: ctse-gateway
  ECS_CLUSTER: ctse-microservice-cluster
  ECS_SERVICE_AUTH: ctse-auth-service
  ECS_SERVICE_GATEWAY: ctse-gateway-service
  TASK_DEF_AUTH: ecs/auth-task-def.json
  TASK_DEF_GATEWAY: ecs/gateway-task-def.json
  MONGO_URI: ${{ secrets.MONGO_URI }}
  ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
  REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  cloudsonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  push-docker:
    name: Push Docker Images
    runs-on: ubuntu-latest
    needs: cloudsonar
    if: success()
    steps:
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push auth image
        run: |
          docker build -t $ECR_URI/$ECR_REPOSITORY_AUTH:latest ./auth-microservice
          docker push $ECR_URI/$ECR_REPOSITORY_AUTH:latest

      - name: Build, tag, and push gateway image
        run: |
          docker build -t $ECR_URI/$ECR_REPOSITORY_GATEWAY:latest ./api-gateway
          docker push $ECR_URI/$ECR_REPOSITORY_GATEWAY:latest

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: push-docker
    if: success()
    strategy:
      matrix:
        service: [auth, gateway]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inject secrets into task definition
        run: |
          if [ "${{ matrix.service }}" == "auth" ]; then
            envsubst < ecs/auth-task-def.json > ecs/task-def.json
            echo "REPO=$ECR_URI/$ECR_REPOSITORY_AUTH:latest" >> $GITHUB_ENV
            echo "CONTAINER=auth-microservice" >> $GITHUB_ENV
            echo "SERVICE=$ECS_SERVICE_AUTH" >> $GITHUB_ENV
          else
            envsubst < ecs/gateway-task-def.json > ecs/task-def.json
            echo "REPO=$ECR_URI/$ECR_REPOSITORY_GATEWAY:latest" >> $GITHUB_ENV
            echo "CONTAINER=gateway-microservice" >> $GITHUB_ENV
            echo "SERVICE=$ECS_SERVICE_GATEWAY" >> $GITHUB_ENV
          fi

      - name: Register new task definition
        id: register-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/task-def.json
          container-name: ${{ env.CONTAINER }}
          image: ${{ env.REPO }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ env.SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          task-definition: ${{ steps.register-task.outputs.task-definition }}
          wait-for-service-stability: true
